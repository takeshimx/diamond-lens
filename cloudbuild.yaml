# CI/CD Pipeline Configuration for MLB API Service Deployment (as of Aug 24, 2025, wip)
steps:
  # # # ----------------------------------------------------------------------
  # # 1. バックエンド (FastAPI) のDockerイメージをビルド
  # # ----------------------------------------------------------------------
  # - id: 'backend-build-image'
  #   name: 'gcr.io/cloud-builders/docker' # Dockerビルド
  #   args:
  #     - 'build'
  #     - '-t'
  #     - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-api:latest'
  #     - './backend'
  #     # --no-cache を追加すると、キャッシュを使わずに常にゼロからビルドします（問題解決に有効）
  #     # - '--no-cache'
  # # ----------------------------------------------------------------------
  # # 2. ビルドしたDockerイメージをContainer Registryにプッシュ
  # # ----------------------------------------------------------------------
  # - id: 'backend-push-image'
  #   name: 'gcr.io/cloud-builders/docker'
  #   args:
  #     - 'push'
  #     - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-api:latest'

  # # _GIT_TAG はGitタグがプッシュされた場合に自動的に設定されます。${_GIT_TAG} はそのタグ名を参照します。
  # # それ以外の場合（例: ブランチへのプッシュ）は空になり、エラーになります。
  # # その場合は、例えばコミットSHAを使うなど、別のタグ付け戦略を検討してください。
  # # 例: 'gcr.io/${PROJECT_ID}/mlb-analytics-api:latest' または 'gcr.io/${PROJECT_ID}/mlb-analytics-api:$COMMIT_SHA'

  # # ----------------------------------------------------------------------
  # # 3. Cloud Runにデプロイ
  # # ----------------------------------------------------------------------
  # - id: 'backend-deploy-cloudrun'
  #   name: 'gcr.io/cloud-builders/gcloud' # gcloudコマンドを使用
  #   args:
  #     - 'run'
  #     - 'deploy'
  #     - 'mlb-diamond-lens-api' # サービス名を直接指定
  #     - '--image'
  #     - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-api:latest' # ビルドしたイメージを指定
  #     - '--region'
  #     - 'asia-northeast1' # デプロイ先のリージョン
  #     - '--platform'
  #     - 'managed' # マネージドCloud Runを使用
  #     - '--allow-unauthenticated' # 認証なしでアクセス可能にする (APIサービス)
  #     - '--port'
  #     - '8080' # FastAPIのデフォルトポートを指定

  # ----------------------------------------------------------------------
  # 4. フロントエンド (React) のDockerイメージをビルド
  # ----------------------------------------------------------------------
  - id: 'frontend-build-image'
    name: 'gcr.io/cloud-builders/docker' # Dockerビルド
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Building frontend with password from Secret Manager..."
        docker build -t gcr.io/${PROJECT_ID}/mlb-diamond-lens-frontend:latest \
          --build-arg VITE_APP_PASSWORD="$$VITE_APP_PASSWORD" \
          ./frontend
    secretEnv: ['VITE_APP_PASSWORD']
      # --no-cache を追加すると、キャッシュを使わずに常にゼロからビルドします（問題解決に有効）
      # - '--no-cache'
  
  # ----------------------------------------------------------------------
  # 5. ビルドしたDockerイメージをContainer Registryにプッシュ
  # ----------------------------------------------------------------------
  - id: 'frontend-push-image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-frontend:latest'
  
  # ----------------------------------------------------------------------
  # 6. Cloud Runにデプロイ
  # ----------------------------------------------------------------------
  - id: 'frontend-deploy-cloudrun'
    name: 'gcr.io/cloud-builders/gcloud' # gcloudコマンドを使用
    args:
      - 'run'
      - 'deploy'
      - 'mlb-diamond-lens-frontend' # サービス名を直接指定
      - '--image'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-frontend:latest' # ビルドしたイメージを指定
      - '--region'
      - 'asia-northeast1' # デプロイ先のリージョン
      - '--platform'
      - 'managed' # マネージドCloud Runを使用
      - '--allow-unauthenticated' # 認証なしでアクセス可能にする (フロントエンドは一般公開)
      - '--port'
      - '8080' # nginxのポートを指定


# Secret Manager から環境変数を取得
availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/VITE_APP_PASSWORD/versions/latest
      env: 'VITE_APP_PASSWORD'

# トリガー実行時のエラーを回避するため、ログの保存先を明示的に指定
options:
  logging: CLOUD_LOGGING_ONLY # ログの保存先をCloud Loggingのみに設定