# CI/CD Pipeline Configuration for MLB API Service Deployment (as of Aug 24, 2025, wip)
steps:
  # ----------------------------------------------------------------------
  # STEP 0: Unit Tests (テスト失敗時はデプロイしない)
  # ----------------------------------------------------------------------
  - id: 'backend-unit-tests'
    name: 'python:3.9'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd backend
        pip install -q -r requirements.txt
        pip install -q pytest pytest-asyncio
        export PYTHONPATH=/workspace/backend
        python -m pytest tests/ -v --tb=short

  # ----------------------------------------------------------------------
  # STEP 1: Schema Validation GATE (スキーマ不一致時はデプロイしない)
  # ----------------------------------------------------------------------
  - id: 'schema-validation-gate'
    name: 'python:3.9'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd backend
        pip install -q google-cloud-bigquery python-dotenv
        export PYTHONPATH=/workspace/backend
        export GCP_PROJECT_ID=${PROJECT_ID}
        export BIGQUERY_DATASET_ID=mlb_analytics_dash_25
        python scripts/validate_schema_config.py

  # ----------------------------------------------------------------------
  # STEP 2: Terraform Apply (インフラストラクチャ更新)
  # ----------------------------------------------------------------------
  - id: 'terraform-init'
    name: 'hashicorp/terraform:1.5.0'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform/environments/production
        terraform init -input=false

  - id: 'terraform-plan'
    name: 'hashicorp/terraform:1.5.0'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform/environments/production
        terraform plan -input=false -out=tfplan

  - id: 'terraform-apply'
    name: 'hashicorp/terraform:1.5.0'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd terraform/environments/production
        # planに変更がある場合のみapply
        if terraform show -json tfplan | grep -q '"resource_changes"'; then
          terraform apply -input=false -auto-approve tfplan
        else
          echo "No infrastructure changes detected"
        fi
  # # ----------------------------------------------------------------------
  # 1. バックエンド (FastAPI) のDockerイメージをビルド
  # ----------------------------------------------------------------------
  - id: 'backend-build-image'
    name: 'gcr.io/cloud-builders/docker' # Dockerビルド
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-api:latest'
      - './backend'
      # --no-cache を追加すると、キャッシュを使わずに常にゼロからビルドします（問題解決に有効）
      # - '--no-cache'
  # ----------------------------------------------------------------------
  # 2. ビルドしたDockerイメージをContainer Registryにプッシュ
  # ----------------------------------------------------------------------
  - id: 'backend-push-image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-api:latest'

  # ----------------------------------------------------------------------
  # 3. Security Scanning (脆弱性スキャン)
  # ----------------------------------------------------------------------
  - id: 'backend-security-scan'
    name: 'aquasec/trivy'
    args:
      - 'image'
      - '--exit-code'
      - '1'
      - '--severity'
      - 'HIGH,CRITICAL'
      - '--ignore-unfixed'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-api:latest'

  # _GIT_TAG はGitタグがプッシュされた場合に自動的に設定されます。${_GIT_TAG} はそのタグ名を参照します。
  # それ以外の場合（例: ブランチへのプッシュ）は空になり、エラーになります。
  # その場合は、例えばコミットSHAを使うなど、別のタグ付け戦略を検討してください。
  # 例: 'gcr.io/${PROJECT_ID}/mlb-analytics-api:latest' または 'gcr.io/${PROJECT_ID}/mlb-analytics-api:$COMMIT_SHA'

  # ----------------------------------------------------------------------
  # 4. Cloud Runにデプロイ
  # ----------------------------------------------------------------------
  - id: 'backend-deploy-cloudrun'
    name: 'gcr.io/cloud-builders/gcloud' # gcloudコマンドを使用
    args:
      - 'run'
      - 'deploy'
      - 'mlb-diamond-lens-api' # サービス名を直接指定
      - '--image'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-api:latest' # ビルドしたイメージを指定
      - '--region'
      - 'asia-northeast1' # デプロイ先のリージョン
      - '--platform'
      - 'managed' # マネージドCloud Runを使用
      - '--allow-unauthenticated' # 認証なしでアクセス可能にする (APIサービス)
      - '--port'
      - '8080' # FastAPIのデフォルトポートを指定

  # ----------------------------------------------------------------------
  # 4. フロントエンド (React) のDockerイメージをビルド
  # ----------------------------------------------------------------------
  - id: 'frontend-build-image'
    name: 'gcr.io/cloud-builders/docker' # Dockerビルド
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Building frontend with password from Secret Manager..."
        docker build -t gcr.io/${PROJECT_ID}/mlb-diamond-lens-frontend:latest \
          --build-arg VITE_APP_PASSWORD="$$VITE_APP_PASSWORD" \
          ./frontend
    secretEnv: ['VITE_APP_PASSWORD']
      # --no-cache を追加すると、キャッシュを使わずに常にゼロからビルドします（問題解決に有効）
      # - '--no-cache'
  
  # ----------------------------------------------------------------------
  # 5. ビルドしたDockerイメージをContainer Registryにプッシュ
  # ----------------------------------------------------------------------
  - id: 'frontend-push-image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-frontend:latest'

  # ----------------------------------------------------------------------
  # 6. Security Scanning (脆弱性スキャン)
  # ----------------------------------------------------------------------
  - id: 'frontend-security-scan'
    name: 'aquasec/trivy'
    args:
      - 'image'
      - '--exit-code'
      - '1'
      - '--severity'
      - 'HIGH,CRITICAL'
      - '--ignore-unfixed'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-frontend:latest'

  # ----------------------------------------------------------------------
  # 7. Cloud Runにデプロイ
  # ----------------------------------------------------------------------
  - id: 'frontend-deploy-cloudrun'
    name: 'gcr.io/cloud-builders/gcloud' # gcloudコマンドを使用
    args:
      - 'run'
      - 'deploy'
      - 'mlb-diamond-lens-frontend' # サービス名を直接指定
      - '--image'
      - 'gcr.io/${PROJECT_ID}/mlb-diamond-lens-frontend:latest' # ビルドしたイメージを指定
      - '--region'
      - 'asia-northeast1' # デプロイ先のリージョン
      - '--platform'
      - 'managed' # マネージドCloud Runを使用
      - '--allow-unauthenticated' # 認証なしでアクセス可能にする (フロントエンドは一般公開)
      - '--port'
      - '8080' # nginxのポートを指定


# Secret Manager から環境変数を取得
availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/VITE_APP_PASSWORD/versions/latest
      env: 'VITE_APP_PASSWORD'

# トリガー実行時のエラーを回避するため、ログの保存先を明示的に指定
options:
  logging: CLOUD_LOGGING_ONLY # ログの保存先をCloud Loggingのみに設定